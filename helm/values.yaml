# Default values for nesis.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

imagePullSecrets: []

nodeSelector: {}

tolerations: []

affinity: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  # name: "optim"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


frontend:
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 3
    maxReplicas: 11
    targetCPU: ""
    targetMemory: ""

  image:
    repository: ametnes/nesis
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest-frontend"


  service:
    port: 8000
    type: ClusterIP
    # Annotations to add to the service
    annotations: {}

  # Configure extra options for containers' liveness probes
  # If not configured, the probe is enabled using the following values
  livenessProbe:
    enabled: true
    port: http
    initialDelaySeconds: 5
    # failureThreshold:
    # periodSeconds:
    # successThreshold:
    # terminationGracePeriodSeconds:
    timeoutSeconds: 10

  # Configure extra options for containers' readiness probes
  # If not configured, the probe is enabled using the following values
  readinessProbe:
    enabled: true
    port: http
    initialDelaySeconds: 5
    # failureThreshold:
    # periodSeconds:
    # successThreshold:
    # terminationGracePeriodSeconds:
    timeoutSeconds: 1

  # Custom liveness probe
  customLivenessProbe: {}

  # Custom rediness probe
  customReadinessProbe: {}

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # extraVolumeMounts:
  #   - name: mage-fs
  #     mountPath: /home/src

  # extraVolumes:
  #   - name: mage-fs
  #     hostPath:
  #       path: /path/to/mage_project

  # config: Default configuration for optim as environment variables. These get injected directly in the container.
  config: {}

  # existingSecret: Spcifies an existing secret to be used as environment variables. These get injected directly in the container.
  existingSecret: ""

  # secrets: Default secrets for optim as environment variables. These get injected directly in the container.
  # Consider using a secret manager first, before sourcing secrets as environment variables.
  secrets: {}

  # extraEnvs: Extra environment variables
  extraEnvs:
    - name: KUBE_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace


api:
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 3
    maxReplicas: 11
    targetCPU: ""
    targetMemory: ""
  image:
    repository: ametnes/nesis
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest-api"


  service:
    port: 6000
    type: ClusterIP
    # Annotations to add to the service
    annotations: {}

  # Configure extra options for containers' liveness probes
  # If not configured, the probe is enabled using the following values
  livenessProbe:
    enabled: true
    port: http
    initialDelaySeconds: 5
    # failureThreshold:
    # periodSeconds:
    # successThreshold:
    # terminationGracePeriodSeconds:
    timeoutSeconds: 10

  # Configure extra options for containers' readiness probes
  # If not configured, the probe is enabled using the following values
  readinessProbe:
    enabled: true
    port: http
    initialDelaySeconds: 5
    # failureThreshold:
    # periodSeconds:
    # successThreshold:
    # terminationGracePeriodSeconds:
    timeoutSeconds: 1

  # Custom liveness probe
  customLivenessProbe: {}

  # Custom rediness probe
  customReadinessProbe: {}

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # extraVolumeMounts:
  #   - name: mage-fs
  #     mountPath: /home/src

  # extraVolumes:
  #   - name: mage-fs
  #     hostPath:
  #       path: /path/to/mage_project

  # config: Default configuration for optim as environment variables. These get injected directly in the container.
  config: {}

  # existingSecret: Spcifies an existing secret to be used as environment variables. These get injected directly in the container.
  existingSecret: ""

  # secrets: Default secrets for optim as environment variables. These get injected directly in the container.
  # Consider using a secret manager first, before sourcing secrets as environment variables.
  secrets: {}

  # extraEnvs: Extra environment variables
  extraEnvs:
    - name: KUBE_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace

rag:
  enabled: true
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 3
    maxReplicas: 11
    targetCPU: ""
    targetMemory: ""

  image:
    tag: "latest-rag"
    pullPolicy: Always

  podSecurityContext:
    fsGroup: 7554
  securityContext:
    runAsUser: 7554
    runAsGroup: 7554

  persistence:
    enabled: true
    size: 10Gi
    storageClass: ~
    path: /home/worker/app/local_data
    accessModes:
      - ReadWriteOnce

  service:
    type: ClusterIP
    port: 8080
    #loadBalancerIP:
    #nodePort:
    #externalTrafficPolicy:
    #externalIPs:
    loadBalancerSourceRanges: []
    annotations:


  extraEnv:
    - name: PYTORCH_MPS_HIGH_WATERMARK_RATIO
      value: '0.0'
    - name: PGPT_PROFILES
      value: 'vllm'
    - name: PGPT_UI_ENABLED
      value: "false"
    - name: HF_HUB_CACHE
      value: /app/nesis/local_data/models
    - name: HF_HOME
      value: /app/nesis/local_data/models
#    - name: OPENAI_API_KEY
#      value:
  config: null


postgresql:
  enabled: true

memcached:
  enabled: true
