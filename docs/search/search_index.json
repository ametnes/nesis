{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-nesis","title":"\ud83d\udc4b What is Nesis\u2753","text":"<p>Nesis is an open-source enterprise knowledge discovery solution that connects to multitudes of datasources, collecting  information and making it available in a conversation manner. Nesis leverages generative AI to aggregate document chunks collected from different documents in multiple formats such as pdf, docx, xlsx and turn them into meaning human-readable compositions. Allowing you to;</p> <ol> <li>Converse with your document via a simple chat interface.</li> <li>Conveniently view comparisons between documents.</li> <li>Summarise large documents.</li> </ol>"},{"location":"#demo","title":"Demo","text":""},{"location":"quick-start/","title":"Nesis Documentation","text":"<p>Nesis leverages the power of Generative AI to help enterprises search and discover information held in multiple repositories including; </p> <ol> <li>MinIO Object Store</li> <li>Windows Shares for your On-premise repositories.</li> <li>And many more</li> </ol> <p>Through the meticulous compilation and examination of your enterprise's data, Nesis harnesses the capabilities of Generative AI to create  conversational engagement with the enterprise user. This allows the enterprise user to search through tons of documents in different formats  and create summaries, comparison as well as suggestions with context that would not have otherwise been obvious.</p> <p>Any user interaction with Nesis via its chat interface is performed through predictions. For a user to chat with any documents and data, they must  have permission to create predictions. Permissions are assigned to a user via user roles. See Administration section for details.</p>"},{"location":"quick-start/#usage","title":"Usage","text":"<p>To chat with documents, you need to first add a document datasource. Supported document datasource include Windows NT Shares, MinIO, S3 buckets. </p>"},{"location":"quick-start/#setup","title":"Setup","text":"<p>To chat with your documents using the Document Q&amp;A</p> <ol> <li>Add a datasource to your document repository.</li> <li>Create a role and assign a policy with permissions to read from that datasource.</li> <li>Assign the role to the specific user(s).</li> </ol>"},{"location":"quick-start/#administration","title":"Administration","text":"<p>Nesis offers flexible configuration including adding multiple users to access the solution as well as managing their roles and permissions.</p>"},{"location":"quick-start/#adding-users","title":"Adding Users","text":"<p>To add a user,</p> <ol> <li>Login using your Administrator email and password.</li> <li>On left menu, navigate to Settings \u2192 Users.</li> <li>Click New User and enter the Name, Email and Password of the user and hit Create.</li> </ol> <p>You\u2019ll then need to distribute the email and password to the user</p>"},{"location":"quick-start/#managing-roles","title":"Managing Roles","text":"<p>Nesis allows the administrator to control who can perform certain actions within Nesis. To best understand the permission structure, we will make some definitions.</p> <ol> <li> <p>At the top level of the permission structure, we have the top level objects. These include;</p> <ol> <li>Datasources</li> <li>Predictions</li> <li>Roles</li> <li>Users</li> </ol> </li> <li> <p>For each of these options, there is a permitted action. The scope of the actions include;</p> <ol> <li>Read</li> <li>Create</li> <li>Delete</li> <li>Update</li> </ol> </li> </ol> <p>A role is defined by a policy defined in JSON and attached to the role. For example</p> <pre><code>{\n  \"items\": [\n    {\n      \"action\": \"create\",\n      \"resource\": \"predictions/*\"\n    },\n    {\n      \"action\": \"read\",\n      \"resource\": \"datasources/*\"\n    }\n  ]\n}\n</code></pre> <p>The above policy allows the role to 1. Read from all datasources. 2. Create a prediction (all chats are predictions).</p> <p>For more precise control over who can access a given datasource, Nesis allows you to specify which datasources a given policy is allowed to access. Here is an example policy,</p> <pre><code>{\n  \"items\": [\n    {\n      \"action\": \"create\",\n      \"resource\": \"predictions/*\"\n    },\n    {\n      \"action\": \"read\",\n      \"resource\": \"datasources/hr-documents\"\n    }\n  ]\n}\n</code></pre> <p>The role is only allowed to</p> <ol> <li>create predictions (All chats are predictions).</li> <li>read the <code>hr-documents</code> datasource.</li> </ol>"},{"location":"quick-start/#creating-a-role","title":"Creating a Role","text":"<p>To create a role;</p> <ol> <li>Navigate to Settings \u2192 Roles.</li> <li>Click Add.</li> <li>Enter the role name and the policy JSON.</li> <li>Click Create.</li> </ol>"},{"location":"quick-start/#assigning-a-role-to-a-user","title":"Assigning a Role to a User","text":"<p>To assign the new role to a user</p> <ol> <li>Navigate to Settings \u2192 Users.</li> <li>Find the user and click Edit.</li> <li>Check the role(s) you want to assign</li> <li>Click Add</li> </ol>"},{"location":"quick-start/#managing-datasources","title":"Managing Datasources","text":""},{"location":"quick-start/#adding-datasources","title":"Adding Datasources","text":"<p>You connect to your data and document repositories using datasources. To add a new Datasource;</p> <ol> <li>Navigate to Settings \u2192 Datasources.</li> <li>Click Add.</li> <li>Select the Type and enter the Name and Connection details</li> <li>Click Add</li> </ol>"},{"location":"dev-guide/architecture/","title":"Nesis Architecture","text":"<p>To set up your local workstation you need to there are three modules for Nesis.</p> <p>To set up your local workstation, you need to install the dependencies for each module.</p> <p>The Nessus project is divided into three modules. The first emoji is for the front end, which in itself has got two components  first component is the front end pages and these are developed in react. The second component of the front end is the back end for the front end. This provides a an API, which the front end uses to talk to the Buck Inn.</p> <p>In order to develop the front end, you need to change directly into the front end and make that the walking folder. When you're in there you need to install the d\u00e9pendances at the root of the front end folder once that's done you. You need to install the front the dependencies of the react component in the client directly no for you to test the front end. You need to have the back and running and so it is a two-step process. The first step is to.</p> <p>The second component for Nessus is the backend API. This component is responsible for managing the authentication uses uses uses uses and the role-based access control, as well as managing the ingestion. Process and scheduling. This component is in the API folder under message to get this started to get this running. You need to change Derek tree change directories into the A</p>"},{"location":"dev-guide/contributing/","title":"Contribution Guide","text":""},{"location":"dev-guide/contributing/#coding-style","title":"Coding Style","text":"<p>TODO</p>"},{"location":"dev-guide/contributing/#testing","title":"Testing","text":"<p>TODO</p>"},{"location":"dev-guide/contributing/#submitting-your-changes","title":"Submitting your changes","text":"<p>TODO</p>"},{"location":"dev-guide/contributing/#pr-titles","title":"PR Titles","text":"<p>TODO</p>"},{"location":"dev-guide/contributing/#merging-your-pr","title":"Merging your PR","text":"<p>TODO</p>"},{"location":"dev-guide/local/","title":"Local Development Guide","text":"<p>This guide walks you through how to start developing Nesis on your local workstation. You can get an overview of the components that make up Nesis and its architecture here.</p>"},{"location":"dev-guide/local/#prerequisites","title":"Prerequisites","text":"<ol> <li>We use docker and docker-compose to support our development process. If you don't have docker installed    locally, please for the Install Docker Engine link for instructions on how    install docker on your local workstation.</li> <li>If you rather not install docker, you will need to have access to a Postgres and Memcached instance.</li> <li>Optional: The RAG Engine needs access to an LLM endpoint such as an OpenAI's endpoint or a private LLM endpoint  in order to start querying your documents. You will need to set the <code>OPENAI_API_KEY</code> and the <code>OPENAI_API_BASE</code>environment variables.</li> <li>You need to have python 3.11 for the API and RAG Engine microservices.</li> <li>You also need to have node and npm installed.</li> </ol>"},{"location":"dev-guide/local/#quick-start","title":"Quick Start","text":""},{"location":"dev-guide/local/#using-docker","title":"Using Docker","text":"<p>For a quick start,</p>"},{"location":"dev-guide/local/#checkout-the-repository","title":"Checkout the repository.","text":"<pre><code>git checkout https://github.com/ametnes/nesis.git\ncd nesis\n</code></pre>"},{"location":"dev-guide/local/#build-all-the-docker-images-locally","title":"Build all the docker images locally.","text":"<pre><code>{\n    docker build --build-arg PUBLIC_URL=/ --build-arg PROFILE=PROD -t ametnes/nesis:latest-frontend . -f nesis/frontend/Dockerfile\n    docker build -t ametnes/nesis:latest-api . -f nesis/api/Dockerfile\n    docker build -t ametnes/nesis:latest-rag . -f nesis/rag/Dockerfile\n}\n</code></pre>"},{"location":"dev-guide/local/#use-the-docker-compose-file-to-run-the-services-locally-in-your-terminal-run","title":"Use the docker compose file to run the services locally. In your terminal, run","text":"<pre><code>docker-compose up\n</code></pre>"},{"location":"dev-guide/local/#access-the-frontend-locally","title":"Access the frontend locally.","text":"<ol> <li>Point your browser to http://localhost:58000/</li> <li> <p>Login with</p> <ol> <li>Email: <code>some.email@domain.com</code></li> <li>Password: <code>password</code></li> </ol> </li> </ol>"},{"location":"dev-guide/local/#using-your-ide","title":"Using your IDE","text":""},{"location":"dev-guide/local/#start-supporting-services","title":"Start supporting services","text":"<p>Supporting services include 1. Postgres (for the backend database as well as the vector database). 2. Memcached for caching and locking services. 3. Optional Minio for document storage. 4. Optional Samba for document storage.</p> <p>To start the supporting service, in a separate terminal, run</p> <pre><code> docker-compose -f compose-dev.yml up\n</code></pre> <p>Set up your python virtualenv</p> <pre><code>python -m venv .venv\nsource .venv/bin/activate\n</code></pre> <p>If you do not have <code>source</code>, you can activate the virtualenv with</p> <pre><code>. .venv/bin/activate\n</code></pre>"},{"location":"dev-guide/local/#start-the-rag-engine","title":"Start the RAG Engine","text":"<p>Install dependencies</p> <pre><code>pip install -r nesis/rag/requirements.txt -r nesis/rag/requirements-torch-cpu-x86.txt -r nesis/rag/requirements-huggingface.txt --default-timeout=1200\n</code></pre> <p>Start the service</p> <pre><code>export NESIS_RAG_EMBEDDING_DIMENSIONS=384 \nexport OPENAI_API_KEY=&lt;your-openai-api-key&gt;\npython nesis/rag/core/main.py\n</code></pre>"},{"location":"dev-guide/local/#start-api-service","title":"Start API Service","text":"<p>Install dependencies</p> <pre><code>pip install -r nesis/api/requirements.txt\n</code></pre> <p>Running the database migration</p> <pre><code>alembic -x \"url=postgresql://postgres:password@127.0.0.1:65432/nesis\" --config nesis/api/alembic.ini upgrade head\n</code></pre> <p>Start the service</p> <pre><code>export NESIS_ADMIN_EMAIL=\"some.email@domain.com\"\nexport NESIS_ADMIN_PASSWORD=\"password\"\npython nesis/rag/api/main.py\n</code></pre>"},{"location":"dev-guide/local/#start-the-frontend","title":"Start the frontend","text":"<p>Install dependencies</p> <pre><code>cd nesis/frontend\nnpm install --legacy-peer-deps --prefix client\nnpm install --legacy-peer-deps\n</code></pre> <p>Start the frontend-backend service with</p> <pre><code>npm run start:server:local\n</code></pre> <p>In a separate terminal, start the frontend with</p> <pre><code>cd nesis/frontend\nnpm run start:client\n</code></pre>"},{"location":"dev-guide/local/#access-the-frontend-locally_1","title":"Access the frontend locally.","text":"<ol> <li>Point your browser to http://localhost:3000/</li> <li> <p>Login with</p> <ol> <li>Email: <code>some.email@domain.com</code></li> <li>Password: <code>password</code></li> </ol> </li> </ol>"},{"location":"dev-guide/local/#all-done","title":"All done","text":"<p>You should now be ready to start developing Nesis</p>"}]}